---
description: Project Description 프로젝트 기획안
alwaysApply: false
---
# 작가 에이전트 시스템 기획안 (Codex/Gemini CLI 개조)

**버전:** v0.1 (초안)

**목표:** 개발자 지향 CLI형 에이전트 도구들(예: Codex CLI, Gemini CLI)을 개조/확장해 (1) 전문 작가 집필 보조, (2) 일반인 대상 대필/공동집필, (3) 자동 소설 생성기(세계관 기반) 세 모드로 작동하는 오픈소스 작가 에이전트 제품군을 구축한다.

---

## 1. 제품 비전

- **오픈 & 해커블:** 모든 에이전트 구성, 툴, 프롬프트가 공개되어 사용자/커뮤니티가 쉽게 포크·튜닝 가능.
- **모듈형 에이전트 코어:** 동일한 코어 위에 각 모드(전문, 대필, 자동생성)를 플러그인/레시피로 스위칭.
- **책임 있는 창작:** 인용/출처·저작권 보호·표절방지·사실검증·스타일 가이드 준수까지 포함하는 “윤리적 글쓰기 파이프라인”.
- **현실적 워크플로:** 아이데이션→구성/플롯→리스치→초안→개정→감수→출판물 내보내기(EPUB/PDF/MDOC)까지 엔드-투-엔드 자동화.

---

## 2. 대상 사용자 & 가치 제안

### 2.1 전문 작가용 집필 도움 Agent

- **핵심 가치:** 빠른 리서치, 정확한 인용 정리, 플롯/구성 도우미, 장/씬 단위 작성 보조, 버전관리·diff 리뷰, 최종 내보내기 자동화.
- **차별점:** CLI·Git 친화, 출처표시/각주/서지 자동화, 스타일 가이드(신문/논픽션/소설 장르별) 준수 체크.

### 2.2 일반인 대필/공동집필 Agent

- **핵심 가치:** 사용자의 목소리/개성 학습(샘플 텍스트 기반), 인터뷰형 프롬프트로 아이디어를 문서화, 초안→개정까지 동행.
- **차별점:** 톤/스타일 모사 프로필과 금칙어·민감주제 가드레일을 함께 설정하는 안전장치.

### 2.3 자동 소설 생성기(세계관 기반)

- **핵심 가치:** 기존 소설/설정 자료를 투입→세계관·캐릭터 바이블 자동 구축→사용자 지시에 따른 무한 스토리 스핀오프.
- **차별점:** 세계관 그래프(타임라인·지형·세력·마법/기술 룰)와 캐릭터 상태 머신을 유지하면서 장편 연속성 보장.

---

## 3. 핵심 기능(모듈) 설계

### 3.1 기획/플롯

- **아이데이션 모듈:** logline, premise, theme 브레인스토밍.
- **플롯 엔진:** 3막/4막, Save the Cat, Hero’s Journey, Kishōtenketsu 등 템플릿 및 커스텀 비트시트.
- **아웃라인 빌더:** 장/씬 트리 작성, 목표/갈등/결말(OGC) 슬롯, POV/시점 관리.

### 3.2 리서치/인용/팩트체크

- **리서처:** 웹/문헌 검색, 노트 수집, 하이라이트.
- **서지 관리자:** CSL 기반 서지 스타일(APA/MLA/시카고) 자동 각주·참고문헌 생성.
- **팩트체커:** 주장/숫자 자동 검증, 의심 스니펫 플래그.

### 3.3 작성/개정

- **장/씬 라이터:** 톤·시점·속도 제어, 대화/설명 밸런스 튜너.
- **스타일 가드:** 금칙어·감수 규칙·독자 등급(일반/청소년) 필터.
- **개정 어시스트:** 목적기반 리라이트(요약·확장·감정 강화·리듬 조정·독자 난도 조정).

### 3.4 세계관/캐릭터(소설 모드)

- **세계관 파서:** 투입 텍스트에서 지식 추출→지식 그래프 구축.
- **연속성 엔진:** 타임라인·지리·룰 체크, 설정 충돌 탐지.
- **캐릭터 바이블:** 프로필, 관계도, 욕망/결점/아크, 상태 변화(SM) 추적.
- **온톨로지 확장:** 단순 엔티티-관계 그래프를 넘어, 장르별 규칙과 개념을 온톨로지로 정의(예: 판타지의 마법 시스템, 추리물의 단서-범인 관계). 이를 통해 스토리 전개에서 일관성과 논리성을 강화.
- **사례 참고:** 실제 대형 프랜차이즈(예: 스타워즈 확장 세계관)나 RPG 세계관 위키가 온톨로지/세만틱 웹을 활용해 설정 충돌을 줄이고 확장성을 관리한 바 있음.

### 3.5 버전/협업/출판

- **Git 통합:** MD 소스·아트팩·메타데이터 버전 관리, PR 템플릿/리뷰 코멘터 자동화.
- **작업보드:** TODO/진행중/검토/완료 칼럼, 장별 진행률.
- **내보내기:** PDF/EPUB/Docx, 글머리표·목차·각주·서지 포함, 표지·ISBN 메타.

---

## 4. 아키텍처 개요

```
┌──────────────────────────────┐
│ CLI UX (codex/gemini 레시피) │  →  TUI/웹 UI(선택)
└──────────┬───────────────────┘
           │
      ┌────▼───────────────────────────┐
      │ Agent Runtime (모듈/레시피)     │
      │ - Planner / Critic / Writer    │
      │ - Tool Router (RAG/웹/서지 등) │
      └────┬───────────────────────────┘
           │
┌──────────▼─────────┐  ┌──────────▼─────────┐  ┌──────────▼──────────┐
│ Knowledge Store     │  │ Tools               │  │ Output Pipeline     │
│ - Vector DB         │  │ - Web Search        │  │ - Formatter(EPUB)   │
│ - KG (graph)        │  │ - Citation Builder  │  │ - PDF/Docx Export   │
│ - Project FS (MD)   │  │ - Fact Checker      │  │ - Lint/Style Check  │
└─────────────────────┘  └─────────────────────┘  └─────────────────────┘

```

- **런타임:** 기존 CLI 에이전트의 루프/플래너를 재사용,
    - 역할 분리: `Planner`(계획), `Researcher`, `Writer`, `Editor/Critic`, `ContinuityKeeper`, `Publisher`.
    - **레시피(프리셋)**: `pro-writer`, `ghostwriter`, `novel-auto`.
- **스토리지:**
    - 프로젝트 루트 구조(예):
        
        ```
        /project
         ├─ /manuscript        # 원고(장/씬별 MD)
         ├─ /notes             # 리서치 노트/하이라이트
         ├─ /world             # 세계관 그래프/캐릭터 바이블(JSON/GraphML)
         ├─ /refs              # 서지(BibTeX/CSL JSON)
         ├─ /exports           # PDF/EPUB/Docx 산출물
         └─ project.yaml       # 메타(장르, 스타일, 금칙어, 목표 독자 등)
        
        ```
        

---

## 5. 워크플로(모드별)

### 5.1 전문 작가 모드(집필 도움)

1. **프로젝트 생성:** 장르·톤·독자·서지 스타일·금칙어 설정.
2. **리서치:** 키워드/질문→웹/문헌 검색→노트→각주/서지 초안 생성.
3. **플롯 & 아웃라인:** 비트시트 선택·수정, 장/씬 트리 생성.
4. **초안 작성:** 씬 단위 작성, 인용 자동 삽입.
5. **개정 패스:** 논리성/사실성/스타일/리듬 4패스 자동 제안.
6. **감수/리뷰:** diff 기반 변경 이력, 체크리스트.
7. **출판물 내보내기:** PDF/EPUB 목차/각주/서지 포함.

### 5.2 일반인 대필/공동집필 모드

1. **목소리 학습:** 사용자의 기존 글 샘플 3~5개 업로드→톤 프로필 생성.
2. **인터뷰 플로우:** 질문 트리로 내용 추출(목적, 독자, 핵심 메시지).
3. **초안 생성:** 사용자의 톤+구조 템플릿 반영.
4. **피드백 라운드:** 사용자가 체크박스/간단 지시→개정.
5. **표현 안전장치:** 민감주제·표현 가드, 사실 검증.
6. **내보내기/공유:** PDF/Docx/블로그 포맷.

### 5.3 자동 소설 생성기(세계관 기반)

1. **자료 투입:** 원작·위키·설정집 텍스트 업로드.
2. **세계관 파싱:** 엔티티/관계 추출→그래프/타임라인 구성.
3. **프롬프트 설계:** 장르/톤/금기/룰(마법/기술) 명시.
4. **스토리 생성:** 에피소드/장편 플롯 생성, 퍼지 목표 설정.
5. **연속성 유지:** 각 씬마다 KG 검증, 설정 충돌 시 수정 제안.
6. **시리즈화:** 캐릭터 아크 누적, 스핀오프 브랜칭.

---

## 6. 기술 사양

### 6.1 런타임/프레임워크

- **기반:** 기존 CLI 에이전트(Codex/Gemini) 레포 포크 → 플러그인식 `tools/` `recipes/` 추가.
- **멀티-LLM 추상화:** OpenAI/Google + 로컬 LLM(옵션) 스위치, 프롬프트/파라미터 레이어 공통화.
- **컨텍스트 관리:** 장/씬 단위 컨텍스트, 장기 메모리(Vector DB), 세계관 KG 캐시.

### 6.2 RAG/지식

- **임베딩:** 장르 특화 임베딩 모델(대화/서사/지식) 선택 가능.
- **인덱스:** 문헌/노트/세계관 별도 컬렉션. 하이브리드 검색(BM25+벡터).
- **인용 파이프라인:** retrieval → quote span 고정 → 각주/서지 포맷터.

### 6.3 세계관 그래프

- **스키마:** `Entity(인물, 장소, 조직, 개념, 룰)` / `Relation(갈등, 동맹, 혈연, 인과)` / `Event(시간·장소매핑)`.
- **검증 규칙:** 금칙 충돌, 타임라인 모순, 능력치 과도/불일치.
- **온톨로지 기반 지식 DB:** 장르 규칙, 설정, 개념을 온톨로지화하여 스토리의 짜임새와 연속성을 보장. 예컨대 판타지 장르의 마법 체계, 추리물의 단서-범인 인과관계를 구조적으로 정의해 스토리 전개에 일관성을 확보.
- **실제 사례:** 스타워즈 EU(Expanded Universe) 관리나 RPG 세계관 위키 제작에 세만틱 웹/온톨로지가 적용된 전례가 있음.

### 6.4 안전/저작권/윤리

- **출처·저작권:** CC/퍼블릭도메인/라이선스 구분, 금지된 텍스트 직접복제 방지(유사도/길이 가이드).
- **표절 검사:** 로컬 n-gram/임베딩 유사도·웹 스팟체크 옵션.
- **개인정보:** PII 필터, 민감주제 경고, 나이등급 체커.

### 6.5 형식/내보내기

- **원고 포맷:** Markdown(Front Matter 메타), 씬 메타(POV, 목표, 갈등), 각주/인용 마크업.
- **빌드 체인:** Pandoc + Typst/LaTeX(선택) → PDF/EPUB/Docx.

---

## 7. 예시 구성 파일

### 7.1 `project.yaml`

```yaml
project:
  name: "겨울의 문학 실험"
  mode: pro-writer  # pro-writer | ghostwriter | novel-auto
  genre: literary_fiction
  audience: adult
  style_guide: chicago
  red_flags: ["차별적 표현", "과도한 폭력 묘사"]
  voice_profile: user
indexes:
  notes: vector-hnsw
  refs: bibtex
world:
  kg: graphml
  continuity: strict
export:
  formats: [pdf, epub]
  pdf_template: classic

```

### 7.2 레시피 프롬프트 스니펫(발췌)

```
[Planner]
목표: 장편 소설의 비트시트를 15 비트로 설계한다.
제약: 장르=미스터리, 톤=차분, 주제=기억과 진실. 금칙어 목록 준수.
산출: JSON (비트ID, 요약, 갈등, 단서, 전환점, 페이싱)

```

---

## 8. CLI UX 초안

```bash
$ writer init mybook --mode pro-writer --style chicago
$ writer research "알츠하이머 최신 진단법" --notes notes/medical.md --cite
$ writer plot create --template hero-journey --out outlines/main.json
$ writer scene new 1-3 --pov "1인칭-주인공" --goal "실종 단서 확보"
$ writer draft 1-3 --assist
$ writer revise 1-3 --pass style,logic,fact
$ writer export --to pdf --cover assets/cover.png

```

---

## 9. 평가 지표 & 벤치마크

- **전문 작가:** 리서치 정확도(샘플 팩트 매칭), 인용 포맷 정합성, 편집 패스 수(감소), 타임투-출판.
- **일반인 대필:** 사용자 만족도(톤 일치도), 인터뷰→초안 전환 시간, 반복 수정 횟수.
- **자동 소설:** 연속성 위반율, 아크 일관성, 독자 피드백(흥미도/이탈율).

---

## 10. 로드맵(6개월)

**M1 (주 1–4): 코어/CLI 스캐폴딩**

- 레포 포크, 플러그인 구조화, 기본 명령어(`init`, `draft`, `export`).

**M2 (주 5–8): 리서치·인용 파이프라인**

- 웹 검색+하이라이트→각주/서지 자동화, 팩트체커 v1.

**M3 (주 9–12): 플롯/아웃라인·씬 라이터**

- 템플릿 세트, 장/씬 메타, 개정 패스.

**M4 (주 13–16): 세계관·연속성 엔진**

- KG 구축/검증, 캐릭터 바이블, 타임라인 체커.

**M5 (주 17–20): 대필 인터뷰 흐름 & 톤 프로파일러**

- 사용자 샘플 학습, 금칙 필터, 안전장치.

**M6 (주 21–24): 내보내기/출판 & 베타**

- PDF/EPUB 템플릿, 공개 베타, 커뮤니티 레시피 마켓.

---

## 11. 리스크 & 대응

- **저작권/표절:**
    
    유사도 탐지 및 출처 관리 기능을 기본 내장하여 표절 위험을 최소화. 퍼블릭 도메인/CC 라이선스 여부 표시, 직접 복제 금지 경고 기능.
    
    **대응:** 웹 기반 표절 탐지기 연동, 문단 단위 유사도 지표 제공, 에디터 승인 프로세스 삽입.
    
- **사실 오류:**
    
    LLM 특성상 사실 오류(Hallucination) 가능성이 높음.
    
    **대응:** 팩트체커·출처 스냅샷 저장 기능, 리뷰어(사용자/에디터) 승인 게이트, 의심 정보 플래그 표시.
    
- **개인정보:**
    
    사용자가 입력하는 글에 개인정보가 포함될 수 있음.
    
    **대응:** PII(개인식별정보) 필터링 모듈, 민감 단어 경고 시스템, 연령 등급 체크.
    
- **기술적 리스크:**
    
    대규모 텍스트 처리 및 장기 연속성 관리에서 메모리·속도 병목 가능.
    
    **대응:** 장/씬 단위 컨텍스트 윈도우 설계, KG 기반 장기 기억 보완, 분산형 캐시/스토리지 적용.
    
- **윤리적 리스크:**
    
    특정 금칙어나 민감 주제를 자동 소설 모드에서 생성할 수 있음.
    
    **대응:** 금칙어·가드레일 룰셋 적용, 사용자 설정 기반의 안전 모드 제공.
    

---

## 12. 결론

본 기획안은 기존 개발자 지향 CLI 에이전트(Codex/Gemini CLI)를 확장하여,

① 전문 작가의 집필 워크플로를 지원하고,

② 일반인의 대필/공동 집필을 보조하며,

③ 자동 소설 생성기를 통한 세계관 기반 창작까지 가능하게 하는 **오픈소스 작가 에이전트 제품군**을 제안한다.

핵심 경쟁력은 **오픈·모듈형 구조**, **윤리적·법적 안전장치 내장**, **세계관·연속성 엔진** 등으로 요약된다.

본 프로젝트가 실현될 경우, “작가와 AI가 협력하는 새로운 집필 패러다임”을 열어 창작자·출판사·일반 독자 모두에게 가치 있는 생태계를 제공할 수 있을 것이다.

---

## 13. 웹 서비스 확장 아이디어 (Local TUI완성 후)

### 13.1 필요성

- CLI 기반 환경은 개발자에게는 익숙하지만, 일반 작가나 초보 사용자는 진입 장벽이 높음.
- 특히 **실시간 협업**, **버전 비교**, **UI 기반 아웃라인 관리** 같은 기능은 CLI보다 웹 환경에서 훨씬 직관적.
- 따라서 CLI 코어를 유지하면서, **웹 프론트엔드**를 얹어 하이브리드 접근을 지향.

### 13.2 아키텍처 구상

```
┌───────────────────────────────┐
│   Web Frontend (React/Next.js) │
│ - 문서 에디터 (Rich Text/MD)   │
│ - 플롯 보드 (캔반/트리뷰)       │
│ - 협업 뷰어 (diff/코멘트)      │
└─────────────▲─────────────────┘
              │ GraphQL/REST API
┌─────────────┴─────────────────┐
│ Backend (FastAPI / Node.js)   │
│ - CLI Core 호출 Wrapper        │
│ - Vector DB / KG 연동          │
│ - Auth / Project Store         │
└─────────────▲─────────────────┘
              │
        ┌─────┴───────────┐
        │ CLI Agent Core   │
        │ (Codex/Gemini)   │
        └─────────────────┘

```

- **Frontend:** React/Next.js + Tailwind로 구현.
    - Markdown/텍스트 편집기, 플롯 보드, 세계관 뷰어 제공.
    - “Docs + Trello + GitHub” 혼합 UI 지향.
- **Backend:** FastAPI(Node.js도 가능)에서 CLI Agent Core를 호출.
    - 기존 CLI 명령어를 API화 (`writer draft`, `writer revise` 등).
    - Project store와 사용자 계정 관리 포함.
- **협업 기능:** WebSocket 기반 실시간 편집, Google Docs 스타일 코멘트/리뷰.

### 13.3 장점

- **진입 장벽 완화:** 개발자가 아니어도 클릭·드래그로 사용 가능.
- **협업/공동 집필:** 실시간 편집·리뷰·버전 diff 비교 UI 제공.
- **멀티디바이스:** 브라우저만 있으면 모바일·태블릿에서도 집필 가능.
- **하이브리드 운용:** 개발자는 CLI 환경에서, 일반인은 웹 환경에서 같은 프로젝트 공유.

### 13.4 실행 단계(로드맵 보완)

- **M7 (주 25–28): 웹 프론트엔드 프로토타입**
    - Markdown 에디터 + 프로젝트 대시보드.
- **M8 (주 29–32): 협업/리뷰 모듈**
    - diff/코멘트, 진행률 보드, 사용자 계정/권한.
- **M9 (주 33–36): 공개 웹 베타 런칭**
    - 프로젝트 공유/포크 기능, 오픈 집필 커뮤니티.

---

## 14. 참고 프로젝트 & 영감: AI Craftr

### 14.1 개요

[AI Craftr](https://aicraftr.app/)는 오픈소스 기반의 **AI 글쓰기 도구 모음 에코시스템**으로, 다양한 목적별 어시스턴트(StoryCraftr, PaperCraftr, ResumeCraftr 등)를 제공한다. 각 툴은 독립적인 CLI 중심 인터페이스를 가지며, 특정 창작/문서화 워크플로우에 맞추어 특화된 기능을 제공한다.

### 14.2 주요 특징

- **모듈러 구조:** 목적별 툴을 개별 프로젝트로 분리하되, 공통 철학과 인터페이스를 공유한다.
- **CLI 중심 UX:** 터미널 환경에서 간단히 호출 가능, 개발자 친화적이며 해커블(hackable).
- **에코시스템 확장:** StoryCraftr(소설), PaperCraftr(논문), ResumeCraftr(이력서) 등 다수의 변형 툴킷 존재, 향후 다양한 분야 확장 가능.
- **오픈소스 정신:** 커뮤니티 기여를 적극 장려, 레시피/툴 추가를 누구나 시도 가능.

### 14.3 시사점

AI Craftr는 “**단일 거대 도구**”가 아니라 “**여러 목적별 툴이 모인 생태계**”라는 점에서 큰 참고 가치가 있다.

본 기획안 역시 **모드(전문 작가, 대필, 자동 소설)**를 각기 독립 레시피/플러그인으로 정의하여, 향후 `WriterCraftr`, `GhostCraftr`, `NovelCraftr`처럼 **목적 기반 서브 브랜드화**가 가능하다.

### 14.4 본 기획안과의 접점

- **레시피/모듈 철학**: AI Craftr처럼 각 모드를 독립된 “Craftr”로 명명하면 사용자 이해도가 높아진다.
- **커뮤니티 마켓**: AI Craftr의 모델을 본떠, 사용자가 직접 제작한 장르/스타일 레시피(`MysteryCraftr`, `FantasyCraftr`)를 공유하는 생태계 가능.
- **CLI + 웹 하이브리드**: 기본은 CLI지만, 웹 UI로 확장 가능하도록 설계 → 다양한 사용층 확보.

---

## 15. VS Code GUI 통합(포크/익스텐션) 설계 (TUI 완성후)

### 15.1 목표

Gemini CLI의 TUI를 대체/보완하는 **데스크톱 GUI**로 VS Code를 활용한다.

- **CLI 코어 그대로** 유지 (에이전트/레시피/MCP 툴 체계 재사용)
- **VS Code GUI**에서 기획–리서치–집필–개정을 일관된 UX로 제공
- 오프라인/로컬 파일 친화, Git·PR·Diff·코멘트 등 개발자 워크플로 자연스레 결합

---

### 15.2 접근 전략: “익스텐션 우선, 포크 선택”

1. **VS Code 익스텐션(권장)**
- 장점: 유지보수 용이, 자동 업데이트/마켓 배포, 플랫폼 공통(Win/Mac/Linux)
- 한계: 코어 UI/동작(에디터/탭/워크벤치) 깊은 커스터마이즈는 제한
- 예시 : vscode-copilot-chat extension code가 공개되어 있음.
1. **VS Code 포크(선택)**
- 장점: 메뉴/패널/기본 에디터까지 제품 정체성에 맞게 과감히 개조
- 한계: 메이저 업데이트 트래킹 비용↑, 배포/서명/업데이트 인프라 필요

> 권장 아키텍처: 1단계 익스텐션으로 시작 → 사용자/기능 요구가 확정되면 핵심 UI를 포크로 심화
> 

---

### 15.3 시스템 아키텍처

```
┌───────────────────────────┐
│ VS Code (Desktop App)     │
│  - Writer Extension        │
│  - Webview UIs             │
│  - TreeViews / Panels      │
└───────────▲───────────────┘
            │ (Node IPC / stdio / WebSocket)
┌───────────┴───────────────┐
│ Local Host (Extension)     │
│  - Gemini CLI Process      │
│  - MCP Tool Clients        │
│  - File/FS Access          │
└───────────▲───────────────┘
            │
      ┌─────┴──────────┐
      │ CLI Agent Core │
      │ (Gemini + MCP) │
      └────────────────┘

```

- **Extension Host**가 Gemini CLI를 **자식 프로세스**로 스폰/관리
- 통신: **stdio(JSON-RPC)** 또는 **localhost gRPC/HTTP**
- 툴 확장: **MCP**(Model Context Protocol) 클라이언트로 표준화
- 프로젝트는 그대로 **MD/JSON/YAML** 파일 구조를 사용 → Git으로 버전 관리

---

### 15.4 핵심 UX 구성

1. **문서 에디터(커스텀/MD 에디터)**
    - Front Matter 메타(POV, 목표, 갈등, 인용 등) 양식 자동 스키마 폼
    - 인용/각주 인라인 어시스트(hover → Cite/Insert)
    - **Live Preview**(문서/EPUB 레이아웃 미리보기)
2. **플롯/아웃라인 보드(Webview)**
    - 비트시트/씬 트리 편집, 드래그 앤 드롭 재정렬
    - 페이싱 타임라인(미니 맵), OGC(목표/갈등/결말) 시각 태그
3. **세계관/캐릭터 그래프(Webview)**
    - Cytoscape.js/elkjs 기반 관계도/타임라인 시각화
    - 규칙 위반(연속성/룰 충돌) 알림/수정 제안
4. **리서치 패널(TreeView + Webview)**
    - 검색/하이라이트/서지(APA/MLA/Chicago) 자동 관리
    - 근거 스냅샷과 인용키(BibTeX/CSL JSON) 관리
5. **개정/감수 패스**
    - “논리/사실/스타일/리듬” 4 패스 체크리스트
    - Diff/Inline Comments(코드 리뷰 UX 재활용)
6. **명령 팔레트 & 사이드바**
    - `Writer: Plan/Research/Draft/Revise/Export`
    - 진행 상황/잡 큐(비동기 작업) 표시

---

### 15.5 MCP/CLI 통신 규격(예시)

**요청(초안 생성)**

```json
{
  "jsonrpc": "2.0",
  "id": "draft-1",
  "method": "writer.draft",
  "params": {
    "sceneId": "1-3",
    "tone": "차분",
    "pov": "1인칭",
    "constraints": ["금칙어: 과도한 폭력", "독자: YA"]
  }
}

```

**응답**

```json
{
  "jsonrpc": "2.0",
  "id": "draft-1",
  "result": {
    "content": "…생성된 초안 텍스트…",
    "citations": [
      {"key":"doe2021", "span":[120,168]},
      {"key":"who2024", "span":[210,245]}
    ],
    "flags": [{"type":"style", "note":"수동태 과다"}]
  }
}

```

- MCP 툴 호출은 `params.tool="factcheck"` 같이 선언적으로 연결
- 긴 작업은 `jobId` 반환 → 진행률/취소 지원

---

### 15.6 VS Code Extension 구현 스캐폴드

**`package.json`(발췌)**

```json
{
  "name": "writer-craftr",
  "displayName": "Writer Craftr",
  "activationEvents": ["onStartupFinished", "onCommand:writer.plan"],
  "contributes": {
    "commands": [
      {"command": "writer.plan", "title": "Writer: Plan"},
      {"command": "writer.draftScene", "title": "Writer: Draft Scene"}
    ],
    "viewsContainers": {
      "activitybar": [{"id": "writer", "title": "Writer", "icon": "media/icon.svg"}]
    },
    "views": {
      "writer": [
        {"id": "writerOutline", "name": "Outline"},
        {"id": "writerResearch", "name": "Research"}
      ]
    },
    "configuration": {
      "properties": {
        "writer.geminiCliPath": {"type":"string", "default":"gemini", "description":"Gemini CLI 경로"},
        "writer.mcp.tools": {"type":"array", "default": ["research","factcheck","export"]}
      }
    }
  }
}

```

**프로세스 스폰(의사 코드, TypeScript)**

```tsx
import { spawn } from "child_process";
let child = spawn(config.cliPath, ["--server", "--stdio"], { cwd: workspaceRoot });
child.stdout.on("data", onMessage);
child.stderr.on("data", onError);
function request(method: string, params: any) {
  const msg = JSON.stringify({ jsonrpc:"2.0", id: uuid(), method, params }) + "\n";
  child.stdin.write(msg);
}

```

**Webview 예시(아웃라인 보드)**

- React + Vite로 번들 → Webview에 주입
- vscode.postMessage / acquireVsCodeApi 통해 양방향 통신

---

### 15.7 파일/프로젝트 구조 매핑

```
/project
 ├─ manuscript/     # .scene.md(.fm 메타) / 장·씬
 ├─ notes/          # 리서치 노트 / 하이라이트
 ├─ world/          # kg.json / characters.json / timeline.json
 ├─ refs/           # references.bib / csl.json
 ├─ exports/        # pdf/epub/docx 산출물
 └─ project.yaml    # 전역 메타/설정

```

- 에디터는 `.scene.md` 열 때 **Front Matter 폼 + 본문** 분리 UI를 표시
- `world/kg.json`은 그래프 뷰어로 시각화

---

### 15.8 인증/비밀키/보안

- OpenAI/Google 등 API 키는 **VS Code SecretStorage** 저장
- 프로젝트별 키 상속/오버라이드 가능(Workspace Settings)
- 외부 툴 접근은 **권한 요청/로그** 남김
- 민감 파일(.env, secrets.json) 자동 `.gitignore` 등록

---

### 15.9 성능/안정성

- **비동기 잡 큐**: 긴 작업(리서치/Export)은 jobId/progress로 분리
- **부분 컨텍스트**: 씬/장 단위로 컨텍스트 축소·증분 캐시
- **디버그/로깅**: Output Channel + Diagnostics 패널 제공
- 크래시 복구: 미저장 변경 자동 스냅샷

---

### 15.10 협업·리뷰

- Git·PR 연계: 씬 단위 Diff/코멘트(“코드 리뷰” UX 그대로)
- “교열 세트”로 리뷰 가이드(체크리스트) 제공
- 멀티 커서 실시간 편집은 **Live Share** 연동으로 해결

---

### 15.11 배포/업데이트

- **익스텐션**: VS Code Marketplace(Private → Public 전환), 자동 업데이트
- **포크 앱**: Electron 빌드, 코드 서명(Win/Mac), in-app 업데이트 채널(Stable/Insider)

---

### 15.12 라이선스/브랜딩

- VS Code 포크 시 **VSCodium/Code - OSS** 라인 검토(상표/아이콘 주의)
- 익스텐션은 MIT/Apache-2.0 권장(커뮤니티 기여 유도)
- 브랜딩: `WriterCraftr`(메인), 서브: `GhostCraftr`, `NovelCraftr`

---

### 15.13 단계별 로드맵(추가)

- **E1 (4주)**: Gemini CLI 프로세스 연동, 명령 팔레트, Draft/Revise MVP
- **E2 (4주)**: 아웃라인/세계관 Webview, 인용/각주 인서트, 팩트체크 MCP 연결
- **E3 (4주)**: Export(EPUB/PDF), 리뷰 패스, Diff/코멘트 UX
- **E4 (6주)**: 안정화, 마켓 공개 베타 / 포크 검토(필요 시)

---

### 15.14 리스크 & 대응(특화)

- **CLI–GUI 통신 불안정** → JSON-RPC 스키마/버전 고정, 재시도/타임아웃 설계
- **Webview 리소스 과다** → 가상 스크롤, 노드 수 제한(그래프), 지연 로딩
- **API 키 유출** → SecretStorage만 사용, 민감 로그 마스킹
- **포크 유지보수** → 익스텐션 우선, 포크는 핵심 UI 결정 후 최소화

---


✦ 이 기획안은 v0.1 초안으로, 커뮤니티 피드백과 기술 검증을 거쳐 점진적으로 구체화 및 개선될 예정이다.